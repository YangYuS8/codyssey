from fastapi import FastAPI
from pydantic import BaseModel
import os

app = FastAPI(title="Codyssey AI Service", version="0.1.0")

class AIGenerateRequest(BaseModel):
    prompt: str

class AIGenerateResponse(BaseModel):
    problem_id: str
    title: str
    description: str

class AIDetectRequest(BaseModel):
    code: str

class AIDetectResponse(BaseModel):
    suspicious: bool
    score: float

@app.get("/health")
async def health():
    return {"status": "ok"}

@app.post("/ai/generate", response_model=AIGenerateResponse)
async def ai_generate(req: AIGenerateRequest):
    # Stub logic: in future call model provider
    return AIGenerateResponse(
        problem_id="stub-123",
        title=f"Generated Problem for: {req.prompt[:20]}",
        description="This is a placeholder problem generated by AI stub."
    )

@app.post("/ai/detect", response_model=AIDetectResponse)
async def ai_detect(req: AIDetectRequest):
    # Stub detection logic
    code_len = len(req.code)
    score = min(0.99, 0.1 + code_len / 1000)
    return AIDetectResponse(suspicious=score > 0.6, score=score)

if __name__ == "__main__":
    port = int(os.getenv("PY_BACKEND_PORT", "8000"))
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=True)
