openapi: 3.0.3
info:
  title: Codyssey API
  version: 0.1.0
  description: |
    初始版本，仅包含健康检查与 Problem CRUD。统一返回格式：
    - 成功: { "data": <payload>, "meta": { ... 可选 }, "error": null }
    - 失败: { "data": null, "error": { "code": "<CODE>", "message": "..." } }
servers:
  - url: http://localhost:8080
    description: Local development
  - url: https://api.example.com
    description: Production (placeholder)

paths:
  /health:
    get:
      summary: 健康检查
      operationId: getHealth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  /version:
    get:
      summary: 版本信息
      operationId: getVersion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
  /problems:
    get:
      summary: 列出问题（分页）
      operationId: listProblems
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        '200':
          description: 列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemListResponse'
        '500':
          description: 服务器错误
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorEnvelope' }
    post:
      summary: 创建问题
      operationId: createProblem
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProblemCreateRequest' }
      responses:
        '201':
          description: 已创建
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProblemEnvelope' }
        '400':
          description: 参数错误
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorEnvelope' }
        '403':
          description: 权限不足
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorEnvelope' }
        '500':
          description: 创建失败
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorEnvelope' }
  /problems/{id}:
    get:
      summary: 获取问题详情
      operationId: getProblem
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/ProblemEnvelope' } } } }
        '400': { description: UUID 格式错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '404': { description: 未找到, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 获取失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
    put:
      summary: 更新问题
      operationId: updateProblem
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProblemUpdateRequest' }
      responses:
        '200': { description: 已更新, content: { application/json: { schema: { $ref: '#/components/schemas/ProblemEnvelope' } } } }
        '400': { description: 参数或 UUID 错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '403': { description: 权限不足, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '404': { description: 未找到, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 更新失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
    delete:
      summary: 删除问题
      operationId: deleteProblem
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: 已删除
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      deleted:
                        type: string
                        format: uuid
                  error:
                    type: 'null'
        '400': { description: UUID 错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '403': { description: 权限不足, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '404': { description: 未找到, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 删除失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }

  /users:
    get:
      summary: 列出用户
      operationId: listUsers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
                  error: { nullable: true }
                required: [data]
        '403': { description: 权限不足, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 服务器错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
    post:
      summary: 创建用户
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserCreateRequest' }
      responses:
        '201': { description: 已创建, content: { application/json: { schema: { $ref: '#/components/schemas/UserEnvelope' } } } }
        '400': { description: 参数错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '403': { description: 权限不足, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '409': { description: 用户名已存在, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 创建失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }

  /users/{id}:
    get:
      summary: 获取用户
      operationId: getUser
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/UserEnvelope' } } } }
        '400': { description: UUID 错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '403': { description: 权限不足, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '404': { description: 未找到, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 获取失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
    delete:
      summary: 删除用户
      operationId: deleteUser
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: 已删除
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      deleted: { type: string, format: uuid }
                  error: { nullable: true }
                required: [data]
        '400': { description: UUID 错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '403': { description: 权限不足, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '404': { description: 未找到, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 删除失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }

  /users/{id}/roles:
    put:
      summary: 更新用户角色
      operationId: updateUserRoles
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserUpdateRolesRequest' }
      responses:
        '200': { description: 已更新, content: { application/json: { schema: { $ref: '#/components/schemas/UserEnvelope' } } } }
        '400': { description: 参数或 UUID 错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '403': { description: 权限不足, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '404': { description: 未找到, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 更新失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }

  /auth/register:
    post:
      summary: 用户注册
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthRegisterRequest' }
      responses:
        '201': { description: 已注册, content: { application/json: { schema: { $ref: '#/components/schemas/AuthAuthResponse' } } } }
        '400': { description: 参数或密码弱, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '409': { description: 用户名存在, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
  /auth/login:
    post:
      summary: 用户登录
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthLoginRequest' }
      responses:
        '200': { description: 成功, content: { application/json: { schema: { $ref: '#/components/schemas/AuthAuthResponse' } } } }
        '401': { description: 凭据错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
  /auth/refresh:
    post:
      summary: 刷新令牌
      operationId: refresh
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthRefreshRequest' }
      responses:
        '200': { description: 新令牌, content: { application/json: { schema: { $ref: '#/components/schemas/AuthTokenPairEnvelope' } } } }
        '401': { description: 失效或非法, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }

  /submissions:
    post:
      summary: 创建代码提交
      description: 需要登录（任意非 guest 身份）。初始 status 为 pending。
      operationId: createSubmission
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SubmissionCreateRequest' }
      responses:
        '201': { description: 已创建, content: { application/json: { schema: { $ref: '#/components/schemas/SubmissionEnvelope' } } } }
        '400': { description: 参数错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '401': { description: 未登录, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 创建失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
    get:
      summary: 列出提交
      description: 按可选过滤 user_id / problem_id / status，分页 limit/offset；非 owner 且无 teacher/system_admin 角色的条目 code 为空。
      operationId: listSubmissions
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: user_id
          schema: { type: string }
        - in: query
          name: problem_id
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SubmissionListResponse' } } } }
        '401': { description: 未登录/无权限, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 查询失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }

  /submissions/{id}:
    get:
      summary: 获取提交详情
      description: Owner 及 teacher / system_admin 可看到 code 字段，其他角色 code 为空字符串。
      operationId: getSubmission
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SubmissionEnvelope' } } } }
        '400': { description: ID 错误, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '404': { description: 未找到, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '401': { description: 未登录, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 获取失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
    patch:
      summary: 更新提交判题状态
      description: 仅 teacher / system_admin（具备 submission.update_status 权限）。状态流转：pending -> judging -> (accepted|wrong_answer|error)。
      operationId: updateSubmissionStatus
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SubmissionUpdateStatusRequest' }
      responses:
        '200': { description: 已更新, content: { application/json: { schema: { $ref: '#/components/schemas/SubmissionEnvelope' } } } }
        '400': { description: 非法状态或非法流转, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '401': { description: 未登录, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '403': { description: 无权限, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '404': { description: 未找到, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 更新失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
  /submissions/{id}/logs:
    get:
      summary: 获取提交的状态流转日志
      operationId: listSubmissionStatusLogs
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SubmissionStatusLogListResponse' } } } }
        '401': { description: 未登录, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '403': { description: 无权限, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }
        '500': { description: 查询失败, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorEnvelope' } } } }

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    APIError:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
      required: [code, message]
    ErrorEnvelope:
      type: object
      properties:
        data:
          nullable: true
        error:
          $ref: '#/components/schemas/APIError'
      required: [error]
    Problem:
      type: object
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        description: { type: string }
        created_at: { type: string, format: date-time }
      required: [id, title, description, created_at]
    ProblemCreateRequest:
      type: object
      properties:
        title: { type: string, minLength: 3, maxLength: 100 }
        description: { type: string, minLength: 5 }
      required: [title, description]
    ProblemUpdateRequest:
      type: object
      properties:
        title: { type: string, minLength: 3, maxLength: 100 }
        description: { type: string, minLength: 5 }
    ProblemEnvelope:
      type: object
      properties:
        data: { $ref: '#/components/schemas/Problem' }
        error: { nullable: true }
      required: [data]
    ProblemListResponse:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Problem' }
        meta:
          type: object
          properties:
            limit: { type: integer }
            offset: { type: integer }
            count: { type: integer }
            total: { type: integer, description: 匹配过滤条件的总条目数 }
        error: { nullable: true }
      required: [data, meta]
    HealthResponse:
      type: object
      properties:
        status: { type: string }
        db: { type: string }
        version: { type: string }
        env: { type: string }
      required: [status, db, version, env]
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string }
        roles:
          type: array
          items: { type: string }
        created_at: { type: string, format: date-time }
      required: [id, username, roles, created_at]
    UserCreateRequest:
      type: object
      properties:
        username: { type: string, minLength: 3, maxLength: 50 }
        roles:
          type: array
          items: { type: string }
          minItems: 0
      required: [username]
    UserUpdateRolesRequest:
      type: object
      properties:
        roles:
          type: array
          items: { type: string }
          minItems: 0
      required: [roles]
    UserEnvelope:
      type: object
      properties:
        data: { $ref: '#/components/schemas/User' }
        error: { nullable: true }
      required: [data]
    AuthRegisterRequest:
      type: object
      properties:
        username: { type: string, minLength: 3 }
        password: { type: string, minLength: 6 }
        roles:
          type: array
          items: { type: string }
      required: [username, password]
    AuthLoginRequest:
      type: object
      properties:
        username: { type: string }
        password: { type: string }
      required: [username, password]
    AuthRefreshRequest:
      type: object
      properties:
        refresh_token: { type: string }
      required: [refresh_token]
    AuthTokenPair:
      type: object
      properties:
        access_token: { type: string }
        refresh_token: { type: string }
        expires_in: { type: integer, description: "access token 剩余秒数" }
      required: [access_token, refresh_token, expires_in]
    AuthAuthResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            user: { $ref: '#/components/schemas/User' }
            tokens: { $ref: '#/components/schemas/AuthTokenPair' }
        error: { nullable: true }
      required: [data]
    AuthTokenPairEnvelope:
      type: object
      properties:
        data:
          type: object
          properties:
            tokens: { $ref: '#/components/schemas/AuthTokenPair' }
        error: { nullable: true }
      required: [data]
    Submission:
      type: object
      properties:
        id: { type: string }
        user_id: { type: string }
        problem_id: { type: string }
        language: { type: string }
        code: { type: string, description: "若非 owner 且无 teacher/system_admin 角色，此字段为空字符串" }
        status: { type: string }
        runtime_ms: { type: integer, description: 执行耗时毫秒 }
        memory_kb: { type: integer, description: 峰值内存 KB }
        error_message: { type: string, nullable: true }
        version: { type: integer, description: 乐观锁/变更计数 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      required: [id, user_id, problem_id, language, status, version, created_at, updated_at]
    SubmissionCreateRequest:
      type: object
      properties:
        problem_id: { type: string }
        language: { type: string }
        code: { type: string }
      required: [problem_id, language, code]
    SubmissionEnvelope:
      type: object
      properties:
        data: { $ref: '#/components/schemas/Submission' }
        error: { nullable: true }
      required: [data]
    SubmissionUpdateStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum: [pending, judging, accepted, wrong_answer, error]
      required: [status]
    SubmissionListResponse:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Submission' }
        meta:
          type: object
          properties:
            limit: { type: integer }
            offset: { type: integer }
            count: { type: integer }
        error: { nullable: true }
      required: [data, meta]
    SubmissionStatusLog:
      type: object
      properties:
        id: { type: string }
        submission_id: { type: string }
        from_status: { type: string }
        to_status: { type: string }
        created_at: { type: string, format: date-time }
      required: [id, submission_id, from_status, to_status, created_at]
    SubmissionStatusLogListResponse:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/SubmissionStatusLog' }
        meta:
          type: object
          properties:
            limit: { type: integer }
            offset: { type: integer }
            count: { type: integer }
        error: { nullable: true }
      required: [data, meta]
